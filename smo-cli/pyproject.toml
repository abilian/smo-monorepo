[project]
name = "smo-cli"
version = "0.2.0"
description = "A command-line interface for the Synergetic Meta-Orchestrator."
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "smo-core",
    "click>=8.0",
    "rich>=12.0",
    "PyYAML>=6.0",
    "dishka>=1.6.0",
    "pytest-asyncio>=1.1.0",
]

[dependency-groups]
dev = [
    "abilian-devtools>=0.7.7",
    "coverage>=7.9.2",
    "pytest",
    "pytest-mock",
]

[build-system]
requires = ["uv-build>=0.8.4,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "smo_cli"
module-root = "src"

[project.scripts]
smo-cli = "smo_cli.cli:main"

#
# Testing configuration
#
[tool.pytest.ini_options]
pythonpath = "."
addopts = "-s"

[tool.coverage.run]
#branch = true
source = ["src/smo_cli"]
omit = ["src/smo_cli/__init__.py"]

[tool.coverage.report]
#show_missing = true
ignore_errors = true
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
